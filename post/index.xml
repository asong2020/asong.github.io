<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on asong的成长记录小屋</title>
    <link>https://asong2020.github.io/post/</link>
    <description>Recent content in Posts on asong的成长记录小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://asong2020.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go语言如何实现可重入锁</title>
      <link>https://asong2020.github.io/2021/05/go%E8%AF%AD%E8%A8%80%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://asong2020.github.io/2021/05/go%E8%AF%AD%E8%A8%80%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/</guid>
      <description>前言 哈喽，大家好，我是asong。前几天一个读者问我如何使用Go语言实现可重入锁，突然想到Go语言中好像没有这个概念，平常在业务开发中也没有要用到可重入锁的概念，一时懵住了。之前在写java的时候，就会使用到可重入锁，然而写了这么久的Go，却没有使用过，这是怎么回事呢？这一篇文章就带你来解密～ 什么是可重入锁 之前写过java的同学对这个概念应该了如指掌，可重入</description>
    </item>
    
    <item>
      <title>Go语言空结构体引发的大型打脸现场</title>
      <link>https://asong2020.github.io/2021/05/go%E8%AF%AD%E8%A8%80%E7%A9%BA%E7%BB%93%E6%9E%84%E4%BD%93%E5%BC%95%E5%8F%91%E7%9A%84%E5%A4%A7%E5%9E%8B%E6%89%93%E8%84%B8%E7%8E%B0%E5%9C%BA/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://asong2020.github.io/2021/05/go%E8%AF%AD%E8%A8%80%E7%A9%BA%E7%BB%93%E6%9E%84%E4%BD%93%E5%BC%95%E5%8F%91%E7%9A%84%E5%A4%A7%E5%9E%8B%E6%89%93%E8%84%B8%E7%8E%B0%E5%9C%BA/</guid>
      <description>背景 哈喽，大家好，我是正在学习PS技术的asong，上周读者问了我一道题，觉得挺有意义的，就在这里分享一下，我们先来看一下这个题： type User struct { } func FPrint(u User) { fmt.Printf(&amp;#34;FPrint %p\n&amp;#34;, &amp;amp;u) } func main() { u := User{} FPrint(u) fmt.Printf(&amp;#34;main: %p\n&amp;#34;, &amp;amp;u) } // 运行结果 FPrint 0x118eff0 main: 0x118eff0 看了运行结果，大多数朋友应该和我一样，一脸懵逼？Go语言不是只有值传递嘛？之前我还写过一篇关于&amp;quot;Go语言参数传递是传值还是传引用吗？&amp;quot;，已经得出</description>
    </item>
    
    <item>
      <title>Go语言中make和new有什么区别？</title>
      <link>https://asong2020.github.io/2021/05/go%E8%AF%AD%E8%A8%80%E4%B8%ADmake%E5%92%8Cnew%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://asong2020.github.io/2021/05/go%E8%AF%AD%E8%A8%80%E4%B8%ADmake%E5%92%8Cnew%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</guid>
      <description>前言 哈喽，大家好，我是拖更好久的鸽子asong。因为5.1去找女朋友，所以一直没有时间写文章啦，想着回来就抓紧学习，无奈，依然沉浸在5.1的甜蜜生活中，一拖再拖，就到现在啦。果然女人影响了我拔刀的速度，但是我很喜欢，略略略。 好啦，不撒狗粮了，开始进入正题，今天我们就来探讨一下Go语言中的make和new到底怎么使用？它们又有什么不同？ 分配内存之new 官方文档</description>
    </item>
    
    <item>
      <title>Go语言中两个nil的比较结果是什么？</title>
      <link>https://asong2020.github.io/2021/05/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E4%B8%A4%E4%B8%AAnil%E7%9A%84%E6%AF%94%E8%BE%83%E7%BB%93%E6%9E%9C%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://asong2020.github.io/2021/05/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E4%B8%A4%E4%B8%AAnil%E7%9A%84%E6%AF%94%E8%BE%83%E7%BB%93%E6%9E%9C%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>背景 哈喽，大家好，我是asong。前几天在一个交流群里看到了一道非常有意思的面试题，今天把它分享出来，我们先来看一下这个道题： fmt.Println(nil== nil) 两个nil的比较结果是什么？ true、false、还是无法编译？ 大家先思考着，文中揭晓答案。 写在开始：建议你们看一下这个视频：https://www.youtube.com/watch?v=ynoY2xz-F8s 需要翻墙哈，看完这</description>
    </item>
    
    <item>
      <title>Go语言中interface的类型断言实现原理及性能分析</title>
      <link>https://asong2020.github.io/2021/04/go%E8%AF%AD%E8%A8%80%E4%B8%ADinterface%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://asong2020.github.io/2021/04/go%E8%AF%AD%E8%A8%80%E4%B8%ADinterface%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>前言 哈喽，everyBody，我是asong，今天我们一起来探索一下interface的类型断言是如何实现的。我们通常使用interface有两种方式，一种是带方法的interface，一种是空的interface。因为Go中是没有泛型，所以我们可以用空的interface{}来作为一种伪泛型使用，当我们使用到空的interface{}作为入参或返回值时，就</description>
    </item>
    
    <item>
      <title>如何平滑切换线上的ElasticSearch索引</title>
      <link>https://asong2020.github.io/2021/04/%E5%A6%82%E4%BD%95%E5%B9%B3%E6%BB%91%E5%88%87%E6%8D%A2%E7%BA%BF%E4%B8%8A%E7%9A%84elasticsearch%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Sat, 10 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://asong2020.github.io/2021/04/%E5%A6%82%E4%BD%95%E5%B9%B3%E6%BB%91%E5%88%87%E6%8D%A2%E7%BA%BF%E4%B8%8A%E7%9A%84elasticsearch%E7%B4%A2%E5%BC%95/</guid>
      <description>前言 哈喽，大家好，我是asong，今天与大家聊一聊如何平滑切换线上的ES索引。使用过ES的朋友们都知道，修改索引真的是一件费时又费力的工作，所以我们应该在创建索引的时候就尽量设计好索引能够满足需求，当然这几乎是不可能的，毕竟存在着万恶的产品经理，所以掌握&amp;quot;平滑切换线上的ES索引&amp;quot;就很必要，接下来我们就来看一看如何实现！ 前置条件 能够平滑切换</description>
    </item>
    
    <item>
      <title>Go语言标准库unsafe包源码解析</title>
      <link>https://asong2020.github.io/2021/03/go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93unsafe%E5%8C%85%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://asong2020.github.io/2021/03/go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93unsafe%E5%8C%85%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
      <description>前言 有看源码的朋友应该会发现，Go标准库中大量使用了unsafe.pointer，要想更好的理解源码实现，就要知道unsafe.pointer到底是什么？所以今天就与大家来聊一聊unsafe包。 什么是unsafe 众所周知，Go语言被设计成一门强类型的静态语言，那么他的类型就不能改变了，静态也是意味着类型检查在运行前就做了。所以在Go语言中是不允许两个指针类型</description>
    </item>
    
    <item>
      <title>Go语言并发编程之sync.waitGroup的源码解析</title>
      <link>https://asong2020.github.io/2021/02/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Bsync.waitgroup%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://asong2020.github.io/2021/02/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Bsync.waitgroup%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
      <description>前言 哈喽，大家好，我是asong，这是我并发编程系列的第三篇文章，上一篇我们一起分析了sync.once的使用与实现，今天我们一起来看一看sync.WaitGroup的使用与实现. 快过年了，这是年前最后一篇推文了，待我积累一下，年后加大力度写干货，在这里先预祝大家新春快乐，身体健康，万事如意！ 什么是sync.WaitGroup 官方文档对sync.WatiGr</description>
    </item>
    
  </channel>
</rss>
