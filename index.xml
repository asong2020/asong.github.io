<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asong的成长记录小屋</title>
    <link>https://asong2020.github.io/</link>
    <description>Recent content on asong的成长记录小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://asong2020.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go语言如何实现可重入锁</title>
      <link>https://asong2020.github.io/2021/05/go%E8%AF%AD%E8%A8%80%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://asong2020.github.io/2021/05/go%E8%AF%AD%E8%A8%80%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/</guid>
      <description>前言 哈喽，大家好，我是asong。前几天一个读者问我如何使用Go语言实现可重入锁，突然想到Go语言中好像没有这个概念，平常在业务开发中也没有要用到可重入锁的概念，一时懵住了。之前在写java的时候，就会使用到可重入锁，然而写了这么久的Go，却没有使用过，这是怎么回事呢？这一篇文章就带你来解密～ 什么是可重入锁 之前写过java的同学对这个概念应该了如指掌，可重入</description>
    </item>
    
    <item>
      <title>Go语言空结构体引发的大型打脸现场</title>
      <link>https://asong2020.github.io/2021/05/go%E8%AF%AD%E8%A8%80%E7%A9%BA%E7%BB%93%E6%9E%84%E4%BD%93%E5%BC%95%E5%8F%91%E7%9A%84%E5%A4%A7%E5%9E%8B%E6%89%93%E8%84%B8%E7%8E%B0%E5%9C%BA/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://asong2020.github.io/2021/05/go%E8%AF%AD%E8%A8%80%E7%A9%BA%E7%BB%93%E6%9E%84%E4%BD%93%E5%BC%95%E5%8F%91%E7%9A%84%E5%A4%A7%E5%9E%8B%E6%89%93%E8%84%B8%E7%8E%B0%E5%9C%BA/</guid>
      <description>背景 哈喽，大家好，我是正在学习PS技术的asong，上周读者问了我一道题，觉得挺有意义的，就在这里分享一下，我们先来看一下这个题： type User struct { } func FPrint(u User) { fmt.Printf(&amp;#34;FPrint %p\n&amp;#34;, &amp;amp;u) } func main() { u := User{} FPrint(u) fmt.Printf(&amp;#34;main: %p\n&amp;#34;, &amp;amp;u) } // 运行结果 FPrint 0x118eff0 main: 0x118eff0 看了运行结果，大多数朋友应该和我一样，一脸懵逼？Go语言不是只有值传递嘛？之前我还写过一篇关于&amp;quot;Go语言参数传递是传值还是传引用吗？&amp;quot;，已经得出</description>
    </item>
    
    <item>
      <title>Search Results</title>
      <link>https://asong2020.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://asong2020.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
